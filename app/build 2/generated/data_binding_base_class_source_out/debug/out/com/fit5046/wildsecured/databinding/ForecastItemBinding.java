// Generated by view binder compiler. Do not edit!
package com.fit5046.wildsecured.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.fit5046.wildsecured.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ForecastItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView forecastDay;

  @NonNull
  public final LinearLayout forecastDescSection;

  @NonNull
  public final LinearLayout forecastMaxSection;

  @NonNull
  public final TextView forecastMaxUv;

  @NonNull
  public final LinearLayout forecastMinSection;

  @NonNull
  public final TextView forecastTempMax;

  @NonNull
  public final TextView forecastTempMin;

  @NonNull
  public final TextView forecastWeatherDesc;

  @NonNull
  public final ImageView forecastWeatherIcon;

  private ForecastItemBinding(@NonNull RelativeLayout rootView, @NonNull TextView forecastDay,
      @NonNull LinearLayout forecastDescSection, @NonNull LinearLayout forecastMaxSection,
      @NonNull TextView forecastMaxUv, @NonNull LinearLayout forecastMinSection,
      @NonNull TextView forecastTempMax, @NonNull TextView forecastTempMin,
      @NonNull TextView forecastWeatherDesc, @NonNull ImageView forecastWeatherIcon) {
    this.rootView = rootView;
    this.forecastDay = forecastDay;
    this.forecastDescSection = forecastDescSection;
    this.forecastMaxSection = forecastMaxSection;
    this.forecastMaxUv = forecastMaxUv;
    this.forecastMinSection = forecastMinSection;
    this.forecastTempMax = forecastTempMax;
    this.forecastTempMin = forecastTempMin;
    this.forecastWeatherDesc = forecastWeatherDesc;
    this.forecastWeatherIcon = forecastWeatherIcon;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ForecastItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ForecastItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.forecast_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ForecastItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.forecast_day;
      TextView forecastDay = rootView.findViewById(id);
      if (forecastDay == null) {
        break missingId;
      }

      id = R.id.forecast_desc_section;
      LinearLayout forecastDescSection = rootView.findViewById(id);
      if (forecastDescSection == null) {
        break missingId;
      }

      id = R.id.forecast_max_section;
      LinearLayout forecastMaxSection = rootView.findViewById(id);
      if (forecastMaxSection == null) {
        break missingId;
      }

      id = R.id.forecast_max_uv;
      TextView forecastMaxUv = rootView.findViewById(id);
      if (forecastMaxUv == null) {
        break missingId;
      }

      id = R.id.forecast_min_section;
      LinearLayout forecastMinSection = rootView.findViewById(id);
      if (forecastMinSection == null) {
        break missingId;
      }

      id = R.id.forecast_temp_max;
      TextView forecastTempMax = rootView.findViewById(id);
      if (forecastTempMax == null) {
        break missingId;
      }

      id = R.id.forecast_temp_min;
      TextView forecastTempMin = rootView.findViewById(id);
      if (forecastTempMin == null) {
        break missingId;
      }

      id = R.id.forecast_weather_desc;
      TextView forecastWeatherDesc = rootView.findViewById(id);
      if (forecastWeatherDesc == null) {
        break missingId;
      }

      id = R.id.forecast_weather_icon;
      ImageView forecastWeatherIcon = rootView.findViewById(id);
      if (forecastWeatherIcon == null) {
        break missingId;
      }

      return new ForecastItemBinding((RelativeLayout) rootView, forecastDay, forecastDescSection,
          forecastMaxSection, forecastMaxUv, forecastMinSection, forecastTempMax, forecastTempMin,
          forecastWeatherDesc, forecastWeatherIcon);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
